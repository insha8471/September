Approach 1 : Using map 

class Solution {
    public int findTheLongestSubstring(String s) {
        HashMap<String,Integer> map = new HashMap<>();
        String curr = "00000";
        map.put(curr, -1);
        int[] vow = new int[5];
        int subs = 0;

        for(int i=0;i<s.length();i++) {
            char ch = s.charAt(i);

            if(ch == 'a') {
                vow[0] = vow[0] ^ ch;
            }else if(ch == 'e') {
                vow[1] = vow[1] ^ ch;
            }else if(ch == 'i') {
                vow[2] = vow[2] ^ ch;
            }else if(ch == 'o') {
                vow[3] = vow[3] ^ ch;
            }else if(ch == 'u') {
                vow[4] = vow[4] ^ ch;
            }

            curr = "";
            for(int j=0;j<5;j++) {
                curr += vow[j];
            }

            if(map.containsKey(curr)) {
                subs = Math.max(subs, i-(map.get(curr)));
            }else{
                map.put(curr, i);
            }
        }
        return subs;
    }
}

Approach 2  :Bit Masking

class Solution {
    public int findTheLongestSubstring(String s) {
        HashMap<Integer,Integer> map = new HashMap<>();
        int mask = 0;
        map.put(mask, -1);
        int maxLen = 0;

        for(int i=0;i<s.length();i++) {
            char ch = s.charAt(i);
            int val = 0;

            if(ch == 'a') {
                val = (1 << 0);
            }else if(ch == 'e') {
                val = (1 << 1);
            }else if(ch == 'i') {
                val = (1 << 2);
            }else if(ch == 'o') {
                val = (1 << 3);
            }else if(ch == 'u') {
                val = (1 << 4);
            }

            mask ^= val;

            if(map.containsKey(mask)) {
                maxLen = Math.max(maxLen, i-(map.get(mask)));
            }else{
                map.put(mask, i);
            }
        }
        return maxLen;
    }
}



