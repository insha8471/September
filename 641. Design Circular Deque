class MyCircularDeque {
    int front;
    int rear;
    int count;
    int k;
    int[] deque;
    public MyCircularDeque(int k) {
        this.k = k;
        deque = new int[k];
        front = 0;
        rear = k-1;
        count = 0;
    }
    
    public boolean insertFront(int value) {
        if(isFull()) {
            return false;
        }

        front = (front-1 + k)%k;
        deque[front] = value;
        count++;
        return true;
    }
    
    public boolean insertLast(int value) {
        if(isFull()){
            return false;
        }
    
        rear = (rear+1)%k;
        deque[rear] = value;
        count++;
        return true;
    }
    
    public boolean deleteFront() {
        if(isEmpty()) return false;
        front = (front+1)%k;
        count--;
        return true;
    }
    
    public boolean deleteLast() {
        if(isEmpty()) return false;
        rear = (rear-1+k)%k;

        count--;
        return true;
    }
    
    public int getFront() {
        if(isEmpty()){
            return -1;
        }

        return deque[front];
    }
    
    public int getRear() {
        if(isEmpty()) {
            return -1;
        }

        return deque[rear];
    }
    
    public boolean isEmpty() {
        return count == 0;
    }
    
    public boolean isFull() {
        return count == k;
    }
}
